Getting and Cleaning Data Course Project

Description of variables, data and transformations used to clean up the data in assigned course project for the Johns Hopkins Getting and Cleaning Data Course.
Source Data:
A full description of the data used in this project can be found at:
http://archive.ics.uci.edu/ml/datasets/Human+Activity+Recognition+Using+Smartphones

The data for this project can be found at: https://d396qusza40orc.cloudfront.net/getdata%2Fprojectfiles%2FUCI%20HAR%20Dataset.zip

Data Set Information (From Human Activity Recognition Using Smartphones Data Set)

“Experiments have been carried out with a group of 30 test subjects (volunteers) within an age bracket of 19-48 years. Each person performed six activities: WALKING, WALKING_UPSTAIRS, WALKING_DOWNSTAIRS, SITTING, STANDING, and LAYING, while wearing a smartphone (Samsung Galaxy S II) on the waist. Using its embedded accelerometer and gyroscope, data was captured on 3-axial linear acceleration and 3-axial angular velocity at a constant rate of 50Hz. The experiments have been video-recorded to label the data manually. The obtained dataset has been randomly partitioned into two sets, where 70% of the volunteers was selected for generating the training data and 30% the test data.
The sensor signals (accelerometer and gyroscope) were pre-processed by applying noise filters and then sampled in fixed-width sliding windows of 2.56 sec and 50% overlap (128 readings/window). The sensor acceleration signal, which has gravitational and body motion components, was separated using a Butterworth low-pass filter into body acceleration and gravity. The gravitational force is assumed to have only low frequency components, therefore a filter with 0.3 Hz cutoff frequency was used. From each window, a vector of features was obtained by calculating variables from the time and frequency domain.”
Attribute Information.
For each record in the dataset it is provided:
•	Triaxial acceleration from the accelerometer (total acceleration) and the estimated body acceleration.
•	Triaxial Angular velocity from the gyroscope.
•	A 561-feature vector with time and frequency domain variables.
•	Its activity label.
•	An identifier of the subject who carried out the experiment.

Step 1. Merge the training and the test sets to create one data set.
After setting the source directory for the files, Load activity labels:

activity_labels <- read.table("./UCI HAR Dataset/activity_labels.txt")[,2]
# Load: data column names

features <- read.table("./UCI HAR Dataset/features.txt")[,2]
•	features.txt
•	activity_labels.txt
•	subject_train.txt
•	x_train.txt
•	y_train.txt
•	subject_test.txt
•	x_test.txt
•	y_test.txt

Step 2. Extract only the measurements on the mean and standard deviation for each measurement.
Extract only the measurements on the mean and standard deviation for each measurement.
extract_features <- grepl("mean|std", features)

Load and process X_test & y_test data.
X_test <- read.table("./UCI HAR Dataset/test/X_test.txt")
y_test <- read.table("./UCI HAR Dataset/test/y_test.txt")
subject_test <- read.table("./UCI HAR Dataset/test/subject_test.txt")

names (X_test) = features

X_test <- X_test[,extract_features]

Load activity labels
y_test[,2] = activity_labels[y_test[,1]]
names(y_test) = c("Activity_ID", "Activity_Label")
names(subject_test) = "subject"

Step 3. Use descriptive activity names to name the activities in the data set
Merge data subset with the activity type table to include the descriptive activity names:
Merge data sets
merged <- rbind(test_data, train_data)

Section 4. Appropriately label the data set with descriptive activity names.

Section 5. Create a second, independent tidy data set with the average of each variable for each activity and each subject.
Produce only a data set with the average of each variable for each activity and subject:
Loaded reshape2 pacakge:
library(reshape2)

Identify rows of data: 
id_labels = c("subject", "Activity_Label")
data_labels =  setdiff(colnames(merged), id_labels)
melt_data = melt(merged, id= id_labels, measure.vars = data_labels)

Apply mean function to get average of dataset melt_data:
average_data = dcast(melt_data, subject + Activity_Label ~ variable, mean) 


